% DDU DATA PARSER
%
% This over-engineered script takes in a text file generated by WinDarab
% and a configuration spreadsheet called SignalSort and sorts the data into
% time series in predefined categories based on their subsystem.
waitfor(msgbox('Press Ok, then select the data .txt file exported from WinDarab.','Import Data File'));
[filename,path] = uigetfile('.txt');
txt_data = importdata(strcat(path,filename),'\t');
[destinationpath,name,ext] = fileparts(strcat(path,filename));

waitfor(msgbox('Press Ok, then select the Signal Sort excel spreadsheet.','Import Excel File'));
[filename,path] = uigetfile('.xlsx');
signal_sort = readtable(strcat(path,filename));


% If the spreadsheet layout changes, edit these values
xlsx_signal_names = table2cell(signal_sort(:,1));
xlsx_subcat = table2cell(signal_sort(:,2));
xlsx_readable_names = table2cell(signal_sort(:,4));

xlsx_readable_names = regexprep(xlsx_readable_names,'\s','');

subcat_map = containers.Map(xlsx_signal_names, xlsx_subcat);

% assign xtime in the table input - it will always be entry 1 and is
% required for timeseries object instantiation 
xtime = txt_data.data(:,1);

CoreData = struct;
CoreData.Powertrain = struct;
CoreData.Vehicle = struct;
CoreData.Powertrain.BatteryPack = struct;
CoreData.Powertrain.Inverter = struct;
CoreData.Powertrain.Cooling = struct;
CoreData.Powertrain.Motor = struct;
CoreData.Vehicle.GPS = struct;
CoreData.Vehicle.Sensors = struct;
CoreData.Uncategorized = struct;


for x = 1:1:(length(txt_data.colheaders) - 1)
    current_index = txt_data.colheaders(x);
    expr = '\s(.*)|\[(.*)';
    new_header = regexprep(current_index,expr,'');
    txt_data.colheaders(x) = new_header;
    if isKey(subcat_map, char(new_header))
        % Find what row in the spreadsheet this value is in, if any
        [found, index] = ismember(new_header,xlsx_signal_names);
        % If the categories change they will need to be added here as
        % unique cases
        switch(subcat_map(char(new_header)))
            case 'Battery Pack'
                CoreData.Powertrain.BatteryPack.(char(xlsx_readable_names(index))) = timeseries(txt_data.data(:,x),xtime,'Name',char(xlsx_readable_names(index)));
            case 'Inverter'
                CoreData.Powertrain.Inverter.(char(xlsx_readable_names(index))) = timeseries(txt_data.data(:,x),xtime,'Name',char(xlsx_readable_names(index)));
            case 'Cooling'
                CoreData.Powertrain.Cooling.(char(xlsx_readable_names(index))) = timeseries(txt_data.data(:,x),xtime,'Name',char(xlsx_readable_names(index)));
            case 'Motor'
                CoreData.Powertrain.Motor.(char(xlsx_readable_names(index))) = timeseries(txt_data.data(:,x),xtime,'Name',char(xlsx_readable_names(index)));
            case 'GPS'
                CoreData.Vehicle.GPS.(char(xlsx_readable_names(index))) = timeseries(txt_data.data(:,x),xtime,'Name',char(xlsx_readable_names(index)));
            case 'Sensors'
                CoreData.Vehicle.Sensors.(char(xlsx_readable_names(index))) = timeseries(txt_data.data(:,x),xtime,'Name',char(xlsx_readable_names(index)));
            otherwise
                CoreData.Uncategorized.(char(xlsx_readable_names(index))) = timeseries(txt_data.data(:,x),xtime,'Name',char(xlsx_readable_names(index)));
        end
    else
        % handle this case with a prompt to continue or store the value as
        % uncategorized and continue
        prompt = strcat('''',char(new_header),''' does not exist in the Signal Sort spreadsheet. Log signal as Uncategorized?');
        answer = questdlg(prompt,'Unmapped Signal Found','Yes','Discard','Cancel','Yes');
        switch answer
            case 'Yes'
                CoreData.Uncategorized.(char(new_header)) = timeseries(txt_data.data(:,x),xtime,'Name',char(new_header));
            case 'Discard'
            case ''
                waitfor(errordlg('Fuck You','Don''t do that.','modal'));
            case 'Cancel'
                return
            otherwise
                waitfor(errordlg('Unexpected error occured. Halting program execution.'));
                return
        end
    end
end

save(strcat(destinationpath,'\',name),'CoreData');
waitfor(msgbox(strcat('File successfully converted! File located at: ',destinationpath),'Success!'));
clear